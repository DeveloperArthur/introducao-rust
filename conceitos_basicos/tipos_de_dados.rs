/*Tipos inteiros */

// Tamanho	Signed	Unsigned
// 8-bit	i8	u8
// 16-bit	i16	u16
// 32-bit	i32	u32
// 64-bit	i64	u64
// arch	isize	usize

/*Cada variante pode ser com ou sem sinal e 
ter tamanho expl√≠cito. Signed e unsigned refere-se 
√† possibilidade do n√∫mero ser negativo ou positivo
em outras palavras, se o n√∫mero precisa de um sinal 
com ele (signed) ou se sempre for positivo pode ser 
representado sem um sinal (unsigned). √â como escrevemos 
n√∫meros no papel: Quando o sinal importa, o n√∫mero √© mostrado 
com um sinal de mais ou menos; contudo, quando √© seguro 
assumir que o n√∫mero √© positivo, √© mostrado sem sinal. */

//i8 pode armazenar n√∫meros de -128 at√© 127
//u8 pode armazenar n√∫meros de 0 at√© 255
//i16 de -32768 at√© 32767
//u16 de 0 at√© 65535
//i32 de -2147483648 at√© 2147483647
//u32 de 0 at√© 4294967295
//i64 -9223372036854775808 at√© 9223372036854775807
//u64 0 at√© 18446744073709551615

/*Tipos de ponto flutuante */

/*Os pontos flutuantes do Rust s√£o f32 e f64, que t√™m 
respectivamente os tamanhos de 32 e 64 bits. O tipo padr√£o 
√© f64 porque nos processadores modernos, a velocidade √© quase 
a mesma que em um f32, mas possui maior precis√£o. */

/*O tipo booleano */

fn bool() {
    let t = true;
    let f: bool = false; // com tipo expl√≠cito
}

/*O tipo de caractere */

//char √© espec√≠ficado com aspas simples
fn char() {
    let c = 'z';
    let z = '‚Ñ§';
    let heart_eyed_cat = 'üòª';
}

/*O tipo composto */

//Rust s√≥ tem 2 tipos compostos (de listas): tupla e matriz

/*Criamos uma tupla escrevendo uma lista de valores 
separados por v√≠rgula dentro de par√™nteses. Cada posi√ß√£o 
da tupla tem um tipo e os tipos dos elementos da tupla 
n√£o necessitam serem iguais. */

fn tupla() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);

    //Pegando os valores da tupla individualmente fazendo desestrutura√ß√£o
    //quebrando uma √∫nica tupla em tr√™s partes:
    let (x, y, z) = tup;

    println!("O valor do y √©: {}", y); // 6.4

    /* Al√©m de desestruturar atrav√©s da correspond√™ncia de padr√µes 
    podemos acessar diretamente um elemento da tupla usando um ponto
    como √≠ndice do valor que queremos acessar. Por exemplo: */

    let x: (i32, f64, u8) = (500, 6.4, 1);

    let quinhentos = x.0;

    let seis_ponto_quatro = x.1;

    let um = x.2;

    //n√£o conseguimos adicionar valores na tupla
}

/*O tipo matriz */

/*Matrizes em Rust s√£o diferentes de matrizes de outras linguagens
porque matrizes em Rust s√£o de tamanhos fixos: uma vez declarado, 
eles n√£o podem aumentar ou diminuir de tamanho.
Em Rust, os valores que entram numa matriz s√£o escritos em uma lista 
separados por v√≠rgulas dentro de colchetes: */

fn matriz() {
    let a = [1, 2, 3, 4, 5];

    /*Um exemplo de quando voc√™ poderia necessitar usar uma matriz no 
    lugar de um vetor √© um programa em que voc√™ precisa saber o nome 
    dos meses do ano. √â improv√°vel que tal programa deseje adicionar 
    ou remover meses, ent√£o voc√™ pode usar uma matriz porque voc√™ 
    sabe que sempre conter√° 12 itens: */

    let meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", 
        "Junho", "Julho", "Agosto", "Setembro", "Outubro", 
        "Novembro", "Dezembro"];
}

//se pedir pro rust compilar esse programa, vai resultar em erro
//pois o rust verifica se o √≠ndice especificado √© menor que o tamaho da matriz

fn panic() {
    let a = [1, 2, 3, 4, 5];
    let indice = 10;

    let elemento = a[indice];

    println!("O valor do elemento √©: {}", elemento);
}

/*Esse √© o primeiro exemplo dos pric√≠pios de seguran√ßa do Rust em a√ß√£o. 
Em v√°rias linguagens de baixo n√≠vel, esse tipo de verifica√ß√£o n√£o √© feita e 
quando voc√™ fornece um √≠ndice incorreto, mem√≥ria inv√°lida pode ser acessada. 
Rust protege voc√™ deste tipo de erro ao dar erro na compila√ß√£o, em vez de 
permitir o acesso √† mem√≥ria */